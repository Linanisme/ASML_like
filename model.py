import torch
import torch.nn as nn

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        # block 1 , input_shape=(3, 180, 180)
        self.cnn1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.relu1 = nn.ReLU(inplace=True)
        self.cnn2 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)
        self.relu2 = nn.ReLU(inplace=True)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2)
        # block 2
        self.cnn3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.relu3 = nn.ReLU(inplace=True)
        self.cnn4 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.relu4 = nn.ReLU(inplace=True)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2)
        # block 3
        self.cnn5 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.relu5 = nn.ReLU(inplace=True)
        self.cnn6 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.relu6 = nn.ReLU(inplace=True)
        self.maxpool3 = nn.MaxPool2d(kernel_size=2)
        # block 4
        self.cnn7 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.relu7 = nn.ReLU(inplace=True)
        self.cnn8 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.relu8 = nn.ReLU(inplace=True)
        self.cnn9 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.relu9 = nn.ReLU(inplace=True)
        self.maxpool4 = nn.MaxPool2d(kernel_size=2)
        # block 5
        self.cnn10 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.relu10 = nn.ReLU(inplace=True)
        self.cnn11 = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.relu11 = nn.ReLU(inplace=True)
        self.maxpool5 = nn.MaxPool2d(kernel_size=2)
        # block 6
        self.cnn12 = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.relu12 = nn.ReLU(inplace=True)
        self.cnn13 = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.relu13 = nn.ReLU(inplace=True)
        self.cnn14 = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.relu14 = nn.ReLU(inplace=True)
        self.maxpool6 = nn.MaxPool2d(kernel_size=2)
        # block 7
        self.fc1 = nn.Linear(256 * 2 * 2, 256)
        self.dt1 = nn.Dropout(p = 0.25)
        self.fc2 = nn.Linear(256, 128)
        self.dt2 = nn.Dropout(p = 0.25)
        self.fc3 = nn.Linear(128, 2)

    def forward(self, x):
        out = self.cnn1(x)
        out = self.relu1(out)
        out = self.cnn2(out)
        out = self.relu2(out)
        out = self.maxpool1(out)
        out = self.cnn3(out)
        out = self.relu3(out)
        out = self.cnn4(out)
        out = self.relu4(out)
        out = self.maxpool2(out)
        out = self.cnn5(out)
        out = self.relu5(out)
        out = self.cnn6(out)
        out = self.relu6(out)
        out = self.maxpool3(out)
        out = self.cnn7(out)
        out = self.relu7(out)
        out = self.cnn8(out)
        out = self.relu8(out)
        out = self.cnn9(out)
        out = self.relu9(out)
        out = self.maxpool4(out)
        out = self.cnn10(out)
        out = self.relu10(out)
        out = self.cnn11(out)
        out = self.relu11(out)
        out = self.maxpool5(out)
        out = self.cnn12(out)
        out = self.relu12(out)
        out = self.cnn13(out)
        out = self.relu13(out)
        out = self.cnn14(out)
        out = self.relu14(out)
        out = self.maxpool6(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.dt1(out)
        out = self.fc2(out)
        out = self.dt2(out)
        out = self.fc3(out)

        return out